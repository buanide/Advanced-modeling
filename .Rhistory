fviz_pca_ind(acp.res,
geom.ind = "point", # show points only (nbut not "text")
col.ind = d$CSP, # color by groups
palette = c("#9b2226", "#ae2012", "#bb3e03",  "#ca6702",  "#e9d8a6",  "#0a9396"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(acp.res,
geom.ind = "point", # show points only (nbut not "text")
col.ind = d$CSP, # color by groups
palette = c("#9b2226", "#ae2012", "#bb3e03",  "#ca6702",  "#e9d8a6",  "#0a9396"),
addEllipses = FALSE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(acp.res,
geom.ind = "point", # show points only (nbut not "text")
col.ind = d$sexe, # color by groups
palette = c("#9b2226", "#ae2012"),
addEllipses = FALSE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(acp.res,
geom.ind = "point", # show points only (nbut not "text")
col.ind = d$sexe, # color by groups
palette = c("#9b2226", "#ae2012"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
TRUE
fviz_pca_ind(acp.res,
geom.ind = "point", # show points only (nbut not "text")
col.ind = d$CSP, # color by groups
palette = c("#9b2226", "#ae2012", "#bb3e03",  "#ca6702",  "#e9d8a6",  "#0a9396"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_eig(acp.res, addlabels = TRUE, ylim = c(0, 50))
# Color by cos2 values: quality on the factor map
fviz_pca_var(acp.res, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
# Color by cos2 values: quality on the factor map
fviz_pca_var(acp.res, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
# Change the transparency by cos2 values
fviz_pca_var(res.pca, alpha.var = "cos2")
# Color by cos2 values: quality on the factor map
fviz_pca_var(acp.res, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
# Change the transparency by cos2 values
fviz_pca_var(acp.res, alpha.var = "cos2")
var <- get_pca_var(acp.res)
var
library("corrplot")
corrplot(var$cos2, is.corr=FALSE)
corrplot(var$contrib, is.corr=FALSE)
# Contributions of variables to PC1
fviz_contrib(acp.res, choice = "var", axes = 1, top = 10)
# Contributions of variables to PC2
fviz_contrib(acp.res, choice = "var", axes = 2, top = 10)
# Contributions of variables to PC1
fviz_contrib(acp.res, choice = "var", axes = 1, top = 20)
# Contributions of variables to PC2
fviz_contrib(acp.res, choice = "var", axes = 2, top = 20)
var$contrib
ifelse(var$contrib>5, var$contrib, 0)
ifelse(var$contrib>5, var$contrib, "NA")
ifelse(var$contrib>5, var$contrib, 0.0)
ifelse(var$cos2>20, var$cos2, 0.0)
ifelse(var$cos2, var$cos2, 0.0)
ifelse(var$cos2>0.20, var$cos2, 0.0)
ifelse(var$cos2>0.20, var$cos2, "-")
0.0
ifelse(var$contrib>5, var$contrib, 0.0)
ifelse(var$cos2>0.20, var$cos2, 0.0)
ifelse(var$cos2>0.30, var$cos2, 0.0)
corrplot(var$cos2, is.corr=FALSE)
# Color by cos2 values: quality on the factor map
fviz_pca_var(acp.res, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
ifelse(var$contrib>5, var$contrib, 0.0)
var$coord
ifelse(var$contrib>5, var$coord, 0.0)
ifelse(var$contrib>5, var$cos2, 0.0)
ifelse(var$contrib>5, var$contrib, 0.0)
ifelse(var$contrib>5, var$cos2, 0.0)
ifelse(var$contrib>5, var$coord, 0.0)
# Color by cos2 values: quality on the factor map
fviz_pca_var(acp.res, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
plot.PCA(Data_eleves.pca, axes = c(1,2), choix = "var")
plot.PCA(acp.res, axes = c(1,2), choix = "var")
plot.PCA(acp.res, axes = c(1,3), choix = "var")
plot.PCA(acp.res, axes = c(1,3), choix = "var",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
# Color by cos2 values: quality on the factor map
fviz_pca_var(acp.res, col.var = "contrib",
axes = c(1,3)
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
# Color by cos2 values: quality on the factor map
fviz_pca_var(acp.res, col.var = "contrib",
axes = c(1,3),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
# Color by cos2 values: quality on the factor map
fviz_pca_var(acp.res, col.var = "contrib",
axes = c(2,3),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
corrplot(var$contrib, is.corr=FALSE)
# Color by cos2 values: quality on the factor map
fviz_pca_var(acp.res, col.var = "contrib",
axes = c(1,3),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
# Color by cos2 values: quality on the factor map
fviz_pca_var(acp.res, col.var = "contrib",
axes = c(1,2),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
# Color by cos2 values: quality on the factor map
fviz_pca_var(acp.res, col.var = "contrib",
axes = c(1,3),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
# Color by cos2 values: quality on the factor map
fviz_pca_var(acp.res, col.var = "contrib",
axes = c(3,1),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
# Color by cos2 values: quality on the factor map
fviz_pca_var(acp.res, col.var = "contrib",
axes = c(1,2),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
fviz_pca_ind(acp.res, col.var = "contrib",
axes = c(1,2),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
# Color by cos2 values: quality on the factor map
fviz_pca_var(acp.res, col.var = "contrib",
axes = c(1,2),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
fviz_pca_ind(acp.res, col.var = "contrib",
axes = c(1,2),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
fviz_pca_var(acp.res, col.var = d$CSP,
palette = c("#0073C2FF", "#EFC000FF", "#868686FF"),
legend.title = "Cluster")
fviz_pca_var(acp.res, col.var = grp,
palette = c("#0073C2FF", "#EFC000FF", "#868686FF"),
legend.title = "Cluster")
d.active[1]
library(ggplot2)
library(factoextra)
library(FactoMineR)
acp.res = PCA(d.active,
scale.unit=TRUE,
ncp = 5,
quanti.sup = d.active[1],
graph=FALSE)
library(ggplot2)
library(factoextra)
library(FactoMineR)
acp.res = PCA(d.active,
scale.unit=TRUE,
ncp = 5,
quanti.sup = d.active[,1],
graph=FALSE)
d.active[,1]
library(ggplot2)
library(factoextra)
library(FactoMineR)
acp.res = PCA(d.active,
scale.unit=TRUE,
ncp = 5,
quanti.sup = d.active[,1],
graph=FALSE)
eig.val <- get_eigenvalue(acp.res)
eig.val
# install.packages("Factoshiny")
#library(Factoshiny)
#Factoshiny(d)
d.active <- d.active
# install.packages("Factoshiny")
#library(Factoshiny)
#Factoshiny(d)
d.active <- d.active[,-1]
str(d.active)
library(ggplot2)
library(factoextra)
library(FactoMineR)
acp.res = PCA(d.active,
scale.unit=TRUE,
ncp = 5,
#quanti.sup = d.active[,1],
graph=FALSE)
eig.val <- get_eigenvalue(acp.res)
eig.val
# crÃ©ation d'un dataframe avec uniquement les variables quantitatives
d.active = d[,7:25]
head(d.active,4)
library(ggplot2)
library(factoextra)
library(FactoMineR)
acp.res = PCA(d.active,
scale.unit=TRUE,
ncp = 5,
quanti.sup = d.active[,1],
graph=FALSE)
eig.val <- get_eigenvalue(acp.res)
eig.val
library(ggplot2)
library(factoextra)
library(FactoMineR)
acp.res = PCA(d.active,
scale.unit=TRUE,
ncp = 5,
quanti.sup = 1,
graph=FALSE)
eig.val <- get_eigenvalue(acp.res)
eig.val
library(ggplot2)
library(factoextra)
library(FactoMineR)
acp.res = PCA(d.active,
scale.unit=TRUE,
ncp = 5,
#quanti.sup = 1,
graph=FALSE)
library(ggplot2)
library(factoextra)
library(FactoMineR)
acp.res = PCA(d.active,
scale.unit=TRUE,
ncp = 5,
quanti.sup = 1,
graph=FALSE)
eig.val <- get_eigenvalue(acp.res)
eig.val
fviz_eig(acp.res, addlabels = TRUE, ylim = c(0, 50))
# Color by cos2 values: quality on the factor map
fviz_pca_var(acp.res, col.var = "contrib",
axes = c(1,2),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
fviz_pca_ind(acp.res, col.var = "contrib",
axes = c(1,2),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
var <- get_pca_var(acp.res)
var
library("corrplot")
corrplot(var$contrib, is.corr=FALSE)
corrplot(var$cos2, is.corr=FALSE)
ifelse(var$contrib>5, var$contrib, 0.0)
ifelse(var$cos2>0.30, var$cos2, 0.0)
ifelse(var$contrib>5, var$coord, 0.0)
fviz_pca_ind(acp.res,
geom.ind = "point", # show points only (nbut not "text")
col.ind = d$CSP, # color by groups
palette = c("#9b2226", "#ae2012", "#bb3e03",  "#ca6702",  "#e9d8a6",  "#0a9396"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
set.seed(123)
res.km <- kmeans(var$coord, centers = 3, nstart = 25)
grp <- as.factor(res.km$cluster)
fviz_pca_var(acp.res, col.var = grp,
palette = c("#0073C2FF", "#EFC000FF", "#868686FF"),
legend.title = "Cluster")
# Contributions of variables to PC1
fviz_contrib(acp.res, choice = "var", axes = 1, top = 20)
# Contributions of variables to PC2
fviz_contrib(acp.res, choice = "var", axes = 2, top = 20)
library(ggplot2)
library(factoextra)
library(FactoMineR)
acp.res = PCA(d,
scale.unit=TRUE,
ncp = 5,
quanti.sup = 7,
quali.sup = c(1:6),
graph=FALSE)
eig.val <- get_eigenvalue(acp.res)
eig.val
fviz_eig(acp.res, addlabels = TRUE, ylim = c(0, 50))
# Color by cos2 values: quality on the factor map
fviz_pca_var(acp.res, col.var = "contrib",
axes = c(1,2),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
fviz_pca_ind(acp.res, col.var = "contrib",
axes = c(1,2),
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
# Contributions of variables to PC1
fviz_contrib(acp.res, choice = "var", axes = 1, top = 20)
# Contributions of variables to PC2
fviz_contrib(acp.res, choice = "var", axes = 2, top = 20)
plot.PCA(acp.res, axes=c(1, 2), choix="ind", habillage=3)
plot.PCA(acp.res, axes=c(1, 2), choix="ind", habillage=13)
plot.PCA(acp.res, axes=c(1, 2), choix="ind", habillage=20)
plot.PCA(acp.res, axes=c(1, 2), choix="ind", habillage=10)
plot.PCA(acp.res, axes=c(1, 2), choix="ind", habillage=7)
plot.PCA(acp.res, axes=c(1, 2), choix="ind", habillage=11)
plot.PCA(acp.res,
axes=c(1, 2),
choix="ind",
label="none",
habillage=11)
plot.PCA(acp.res,
axes=c(1, 2),
choix="ind",
label="none",
habillage=10)
plot.PCA(acp.res,
axes=c(1, 2),
choix="ind",
label="none",
habillage=15)
plot.PCA(acp.res,
axes=c(1, 2),
choix="ind",
label="none",
habillage=16)
plot.PCA(acp.res,
axes=c(1, 2),
choix="ind",
label="none",
habillage=17)
plot.PCA(acp.res,
axes=c(1, 2),
choix="ind",
label="none",
habillage=18)
plot.PCA(acp.res,
axes=c(1, 2),
choix="ind",
label="none",
habillage=17)
library("Hmisc")
rcorr(as.matrix(d))$P
as.matrix(d)
str(d) # affiche la structure (le type) des donnÃ©es
rcorr(as.matrix(d.active))$P
str(d.active)
rcorr(as.matrix(d.active))$r
library("Hmisc")
rcorr(as.matrix(d.active))$P
mcor <- rcorr(as.matrix(d.active))$r
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45)
library("Hmisc")
rcorr(as.matrix(d.active))$P
mcor <- rcorr(as.matrix(d.active))$r
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45)
View(mcor)
View(mcor)
library("Hmisc")
rcorr(as.matrix(d.active))$P
mcor <- rcorr(as.matrix(d.active))$r
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45)
str(d.active)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=40)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=10)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=60)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=55)
corrplot(mcor,
type="upper",
order="hclust",
tl.col="black",
addCoef.col = T,
tl.srt=55)
corrplot(mcor,
type="upper",
order="hclust",
tl.col="black",
addCoef.col = T,
addCoefasPercent = T,
tl.srt=55)
corrplot(mcor,
type="upper",
order="hclust",
tl.col="black",
#addCoef.col = T,
addCoefasPercent = T,
tl.srt=55)
corrplot(mcor,
type="upper",
order="hclust",
tl.col="black",
addCoef.col = T,
addCoefasPercent = T,
tl.srt=55)
corrplot(mcor,
type="upper",
order="hclust",
tl.col="black",
#addCoef.col = T,
#addCoefasPercent = T,
tl.srt=55)
mcor
ifelse(mcor>0.4, mcor, 0)
mcor <- ifelse(mcor>0.4, mcor, 0)
mcor
View(mcor)
knitr::opts_chunk$set(echo = TRUE)
library(RColorBrewer)
library(funModeling)
knitr::opts_chunk$set(echo = TRUE)
library(RColorBrewer)
library(funModeling)
ifelse(mcor>0.4, mcor, 0)
install.packages("funModeling")
knitr::opts_chunk$set(echo = TRUE)
library(RColorBrewer)
library(funModeling)
library(corrplot)
library(Hmisc)
library(glmnet)
library(FactoMineR)
library(factoextra)
library(ggplot2)
library(readxl)
scooter <- read_excel("scooter.xls")
scooter <- scooter[,-1]
str(scooter)
scooter$'note-satisfaction' = as.numeric(scooter$'note-satisfaction')
scooter$sexe = as.factor(scooter$sexe)
scooter$Ã¢ge = as.factor(scooter$Ã¢ge)
scooter$CSP = as.factor(scooter$CSP)
scooter$'type-cylindrÃ©e' = as.factor(scooter$'type-cylindrÃ©e')
scooter$'type-utilisation' = as.factor(scooter$'type-utilisation')
scooter$'critÃ¨re-esthÃ©tique' = as.factor(scooter$'critÃ¨re-esthÃ©tique')
par(mfrow=c(2,3))
barplot(table(scooter$sexe), col = brewer.pal(n = 3, name = "Blues"), main = "Sexe")
barplot(table(scooter$Ã¢ge), col = brewer.pal(n = 7, name = "Blues"), main = "Age")
barplot(table(scooter$CSP), col = brewer.pal(n = 6, name = "Blues"), main = "CSP")
barplot(table(scooter$'type-cylindrÃ©e'), col = brewer.pal(n = 4, name = "Blues"), main = "CylindrÃ©e")
barplot(table(scooter$'type-utilisation'), col = brewer.pal(n = 3, name = "Blues"), main = "Utilisation")
barplot(table(scooter$'critÃ¨re-esthÃ©tique'), col = brewer.pal(n = 7, name = "Blues"), main = "CritÃ¨re EsthÃ©tique")
df_status(scooter, print_result = FALSE)$p_na
df_status(scooter, print_result = FALSE)$q_na
par(mfrow=c(2,2))
boxplot(`note-satisfaction` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-magasin` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-marque` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-esthÃ©tique` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-prix` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-confort-pilote` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-confort-passager` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-dimensions` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-freinage` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-cylindrÃ©e` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-antivol` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-tableau-de-bord` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-accessoires` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-rangement` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-propulsion` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-refroidissement` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-tablier-avant` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-feux` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
boxplot(`imp-fiabilitÃ©-moteur` ~ sexe, data = scooter, col = brewer.pal(n = 3, name = "Blues"))
mat <- cor(as.matrix(scooter[,7:25]))
corrplot(mat,method="square", type="upper", order="hclust", tl.col="black")
scooter_factor <- read_excel("scooter.xls")
scooter_factor <- scooter_factor[, -1]
scooter_factor <- as.data.frame(lapply(scooter_factor, as.factor))
sf.mca = MCA(scooter_factor)
sum(sf.mca$eig[,2]>(100/nrow(sf.mca$eig)), na.rm=TRUE)
sum(sf.mca$eig[,1]>(sum(sf.mca$eig[,1])/nrow(sf.mca$eig)), na.rm=TRUE)
barplot(sf.mca$eig[,3])
lines(c(0,20),c(80,80))
##  Coupure de l'arbre en 4 classes (typologie)
hcpc=HCPC(sf.mca,nb.clust=2)
caracteristiques <- scooter[,1:6]
notes <- scooter[,7:25]
scooter.fma <- MFA(scooter, group = c(6, 19), type=c("n", "s"), graph = TRUE)
scooter$'note-satisfaction' = as.numeric(scooter$'note-satisfaction')
scooter$sexe = as.factor(scooter$sexe)
scooter$Ã¢ge = as.factor(scooter$Ã¢ge)
scooter$CSP = as.factor(scooter$CSP)
scooter$'type-cylindrÃ©e' = as.factor(scooter$'type-cylindrÃ©e')
scooter$'type-utilisation' = as.factor(scooter$'type-utilisation')
scooter$'critÃ¨re-esthÃ©tique' = as.factor(scooter$'critÃ¨re-esthÃ©tique')
